@startuml

title Bridge ZEC.z to ZEC Sequence Diagram

actor "ZEC.z Owner" as ZO
participant "ZavaX\nBridge UI" as UI
entity "Core\nWallet" as MC
participant "ZavaX\nAgent" as ZA 
participant "Current\nGuardians" as PV
participant "Signing\nGuardians" as SG
participant "ZEC.z\nContract" as ZC
entity "Avalanche\nC-Chain" as CC  
entity "\nZebra" as Z
participant "ZavaX\nConsensus\nEngine" as ZCE

autonumber
group Gather balance and account info for the ZEC.z Owner
    ZO -> UI ++: Go to bridge website and \nConnect AVAX wallet
    UI -> MC ++: Request ZEC.z balance
    MC -> CC ++: Request ZEC.z balance
    CC --> MC --: ZEC.z balance
    MC --> UI --: ZEC.z balance
    UI -> ZA ++: Request ZEC balance
    ZA -> Z ++: Request ZEC balance
    Z --> ZA --: ZEC balance
    ZA --> UI --: ZEC balance
    UI --> ZO : Show ZEC.z and ZEC balances & \nZEC transparent address\nassociated with AVAX address
end

group Initiate bridging on Avalanche
    ZO -> UI : Initiate bridge reqest
    UI -> MC ++: Sign request
    MC --> UI --: Signed request
    UI -> ZC ++: Send bridge request + gas
    UI -> ZA ++: Notify: incoming warp message +\ngas for burn/refund
    ZC -> CC ++: Verify funds availability
    CC --> ZC --: Funds available
    ZC -> ZC : Put funds into escrow
    ZC -> ZC : Create warp\nmessage for ZavaX
end

group Create Zcash transaction (unwrap ZEC)
    loop until timeout
        ZA -> ZC : Poll for queued messages
    end
    ZC --> ZA : ZavaX message for ZEC unwrap
    ZA -> ZCE ++: Submit warp message,\nunsigned transaction\nfor ZEC unwrap, & tx fee
    ZCE -> ZCE: Validate warp message\nfrom contract
    ZCE -> PV : broadcast message to current\nguardians to poll for signing\nguardians\participants.
    ZCE -> SG : Gather FROST commitments\n from signing guardians/participants
    SG --> ZCE : Each submit FROST round1.commit()\nthrough authenticated channel
    ZA -> ZCE : create new FROST SigningPackage
    ZCE --> SG : send SigningPackage to all\n signing guardians participating\nof the signature.
    SG -> SG : All t participant signing guardians\nuse SigningPackage, nonces\nand KeyPackage\nto produce their signature round2.sign().
    SG --> ZCE : All t signing guardians\nsubmit their SignatureShare to ZCE\nthrough authenticated channel
    ZCE -> ZCE : Write signature Shares to a block
    ZCE -> ZCE : aggregate signatures
    ZCE -> ZCE : sign xfer
    ZCE --> ZA --: Validation results
    ZA -> Z ++: Submit signed transaction
    loop until confirmed depth reached
        ZA -> Z: Poll for block depth
        Z --> ZA --: Return depth
    end 
end 

opt Zcash transaction appears successful

    ZA -> ZCE ++: Check OK to burn ZEC.z
    ZCE -> Z ++: Transaction committed?
    Z --> ZCE --: Confirmation
    note left: Each ZavaX guardian\nqueries its own\nZebra instance
    ZCE -> ZCE : Write block:\ntransaction\nsuccessful/failed
    alt Zcash transaction is successful 
        ZCE --> ZA : Message that ZEC.z can be burnt
        ZA --> ZC : Message + gas
        ZC -> ZC: Verify warp signature\n& weight
        ZC -> CC ++: Burn ZEC.z from escrow
        CC --> ZC --: Confirmation
    else Zcash transaction failed
        ZCE --> ZA --: Message to refund ZEC.z from escrow
        ZA --> ZC : Message + gas
        ZC -> ZC: Verify warp signature\n& weight
        ZC -> CC ++: Refund ZEC.z from escrow
        CC --> ZC --: Confirmation
        deactivate ZC
    end
end 

group Refresh balance and account info for the ZEC.z Owner
    UI -> MC ++: Request ZEC.z balance
    MC -> CC ++: Request ZEC.z balance
    CC --> MC --: ZEC.z balance
    MC --> UI --: ZEC.z balance
    UI -> ZA : Request ZEC balance
    ZA -> Z ++: Request ZEC balance
    Z --> ZA --: ZEC balance
    ZA --> UI --: ZEC balance
    UI --> ZO --: Show Results 
end
@enduml
